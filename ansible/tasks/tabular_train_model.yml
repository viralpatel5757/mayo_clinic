---

# Verify that user can train an AutoML-tabular model via Vertex AI

# --------------- Scenario 1 : tabular model already exists in respective project --------------------------#

- name: Get the List of existing models.
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/models"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: model_list

- name: get the list of existing model names
  ansible.builtin.set_fact:
    model_name_list: "{{ (model_list.json.models | map (attribute='displayName')) }}"
  when: "model_list.json is defined"

- name: get model id of existing model
  ansible.builtin.set_fact:
    model_id: "{{ model_list.json.models | json_query(query) | map('split', '/')|map(attribute=5)|list |first }}"
  vars:
    query: "[?displayName == 'tabular_new_training'].name"
  when:
    - model_name_list is defined
    - "'tabular_new_training' in model_name_list"

- name: Set status flag
  ansible.builtin.set_fact: train_tabular_dataset_status="Passed"
  when:
    - model_name_list is defined
    - "'tabular_new_training' in model_name_list"

- name: Log train-tabular-dataset API results
  ansible.builtin.script: >
    log.py "Vertex AI" "Train tabular Dataset" {{ train_tabular_dataset_status }}
    "User can train tabular-dataset" "https://rb.gy/wxno2q"
  args:
    executable: python3
  when:
    - model_name_list is defined
    - "'tabular_new_training' in model_name_list"

# --------------- Scenario 2 : tabular model does not exists in respective project ------------------#

- name: Template entity training model
  ansible.builtin.template:
    src: "{{ role_path }}/files/tabular_train.json.j2"
    dest: "{{ role_path }}/files/tabular_train.json"
    mode: 0644
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"

- name: train a tabular model
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/trainingPipelines"
    method: POST
    body: "{{ lookup('file','tabular_train.json') }}"
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: train_tabular_response
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"

- name: Pause for 50 minutes
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"
  ansible.builtin.pause:
    minutes: 50

- name: Get Auth Token
  ansible.builtin.command: gcloud auth application-default print-access-token
  register: gcloud_auth_token
  changed_when: false

- name: Set Auth Token
  ansible.builtin.set_fact:
    gcloud_auth: '{{ gcloud_auth_token.stdout }}'

- name: Pause for 50 minutes
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"
  ansible.builtin.pause:
    minutes: 50

- name: Get Auth Token
  ansible.builtin.command: gcloud auth application-default print-access-token
  register: gcloud_auth_token
  changed_when: false

- name: Set Auth Token
  ansible.builtin.set_fact:
    gcloud_auth: '{{ gcloud_auth_token.stdout }}'

- name: Pause for 30 minutes
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"
  ansible.builtin.pause:
    minutes: 30

- name: Get Auth Token
  ansible.builtin.command: gcloud auth application-default print-access-token
  register: gcloud_auth_token
  changed_when: false

- name: Set Auth Token
  ansible.builtin.set_fact:
    gcloud_auth: '{{ gcloud_auth_token.stdout }}'

- name: wait until tabular model gets trained
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/trainingPipelines/{{ train_tabular_response.json.name.split('/')[5] }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: train_tabular_response1
  until: train_tabular_response1.json.state == "PIPELINE_STATE_SUCCEEDED"
  retries: 30
  delay: 90
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"

- name: set model name
  ansible.builtin.set_fact:
    model_name: "{{ train_tabular_response.json.modelToUpload.displayName }}"
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"

- name: Get Auth Token
  ansible.builtin.command: gcloud auth application-default print-access-token
  register: gcloud_auth_token
  changed_when: false

- name: Set Auth Token
  ansible.builtin.set_fact:
    gcloud_auth: '{{ gcloud_auth_token.stdout }}'

- name: Get tabular model information
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/models?filter=display_name={{ model_name }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: model_tabular_response
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"

- name: set model ID
  ansible.builtin.set_fact:
    model_id: "{{ model_tabular_response.json.models.0.name.split('/')[5] }}"
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"

- name: showing the model id
  ansible.builtin.debug:
    msg: "{{ model_id }}"
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"

- name: Set status flag
  ansible.builtin.set_fact: train_tabular_dataset_status="Passed"
  when:
    - "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"
    - train_tabular_response1.json.state == "PIPELINE_STATE_SUCCEEDED"

- name: Log tabular-dataset API results
  ansible.builtin.script: >
    log.py "Vertex AI" "Train Tablular Dataset" {{ train_tabular_dataset_status }}
    "User can train tabular-dataset" "https://rb.gy/wxno2q"
  args:
    executable: python3
  when: "(model_name_list is not defined) or ('tabular_new_training' not in model_name_list)"
