---
# Note: This test scenario is to Test User can use Vertex AI (VAI)
# on Custom-Built Container Hyperparameter Tuning using VAI-un-managed datasets (vumds) as Follows:
# 1) Verify that user can create a Hyperparameter Tuning (Hypptune) Custom Container
#    Using a VAI-un-managed dataset + GPU-accelerator training
# 2) Verify that user can successfully complete a Hypptune job
#    using the Custom-Built Hypptune Container (via Rest API)
# 3) Verify that user can cancel and delete a Commandline-Initiated running Hypptune job
#    using the Custom-Built Hypptune Container via Rest API

# ------- create hyperparameter_tuning_job and wait until it gets completed via Rest API ------------#

# --------------- Scenario 1 : hyperparameter_tuning_job already exists in VAI --------------------------#
- name: check if hyperparameter_tuning_job already exist in VAI
  ansible.builtin.command: gcloud ai hp-tuning-jobs list --project={{ project }} --region={{ vertex_region }}
  register: hyper_job_list
  changed_when: false

- name: Set status flag
  ansible.builtin.set_fact: hypptune_job_create_cmd_restapi_status="Passed"
  when: "(hyper_job_list.stdout is defined) and ('hyperparameter_tuning_job' in hyper_job_list.stdout)"

- name: Log hyperparameter_tuning_job results
  ansible.builtin.script: >
    log.py "Vertex AI" "perform hyperparameter_tuning_job" {{ hypptune_job_create_cmd_restapi_status }}
    "hyperparameter_tuning_job is alredy present in VAI hyperparameter Job section" "https://rb.gy/miwpzw"
  args:
    executable: python3
  when: "(hyper_job_list.stdout is defined) and ('hyperparameter_tuning_job' in hyper_job_list.stdout)"

# -------- Scenario 2 : create hyperparameter_tuning_job as it does not exists in respective project -------#

- name: Template entity training model
  ansible.builtin.template:
    src: "{{ role_path }}/files/hyperparameter_tuning_umds_custcont.json.j2"
    dest: "{{ role_path }}/files/hyperparameter_tuning_umds_custcont.json"
    mode: 0644
  when: "(hyper_job_list.stdout is not defined) or ('hyperparameter_tuning_job' not in hyper_job_list.stdout)"

- name: perform a hyperparameter_tuning_job
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/hyperparameterTuningJobs"
    method: POST
    body: "{{ lookup('file','hyperparameter_tuning_umds_custcont.json') }}"
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: run_hyper_tuning_job_response
  when: "(hyper_job_list.stdout is not defined) or ('hyperparameter_tuning_job' not in hyper_job_list.stdout)"

- name: wait until hyperparameter_tuning_job gets completed
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/hyperparameterTuningJobs/\
         {{ run_hyper_tuning_job_response.json.name.split('/')[5] }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: run_hyper_tuning_job_response1
  until: run_hyper_tuning_job_response1.json.state == "JOB_STATE_SUCCEEDED"
  retries: 30
  delay: 120
  when: "(hyper_job_list.stdout is not defined) or ('hyperparameter_tuning_job' not in hyper_job_list.stdout)"

- name: Get Auth Token
  ansible.builtin.command: gcloud auth application-default print-access-token
  register: gcloud_auth_token
  changed_when: false

- name: Set Auth Token
  ansible.builtin.set_fact:
    gcloud_auth: '{{ gcloud_auth_token.stdout }}'

- name: Set status flag
  ansible.builtin.set_fact: hypptune_job_create_cmd_restapi_status="Passed"
  when:
    - "(hyper_job_list.stdout is not defined) or ('hyperparameter_tuning_job' not in hyper_job_list.stdout)"
    - run_hyper_tuning_job_response1.json.state == "JOB_STATE_SUCCEEDED"

- name: Log perform_hyper_tuning_job results
  ansible.builtin.script: >
    log.py "Vertex AI" "perform hyperparameter_tuning_job" {{ hypptune_job_create_cmd_restapi_status }}
    "User can create hyperparameter_tuning_job in VAI hyperparameter Job section" "https://rb.gy/miwpzw"
  args:
    executable: python3
  when: "(hyper_job_list.stdout is not defined) or ('hyperparameter_tuning_job' not in hyper_job_list.stdout)"

# --------------- cancel and delete hyperparameter_tuning_job via Rest API -----------------#

- name: Template entity to Start a training hypptune job
  ansible.builtin.template:
    src: "{{ role_path }}/files/hyperparameter_tuning_config.yml.j2"
    dest: "{{ role_path }}/files/hyperparameter_tuning_config.yml"
    mode: 0644

- name: Start a training hypptune job via Commandline for simplicity
  ansible.builtin.command: |
    gcloud ai hp-tuning-jobs create --project={{ project }} --region={{ vertex_region }}
    --display-name=hyperparameter_tuning_job_api --max-trial-count=8 --parallel-trial-count=2
    --config={{ role_path }}/files/hyperparameter_tuning_config.yml
  register: hyper_tuning_job_api
  changed_when: false

- name: get the hyper_tuning_job id
  ansible.builtin.set_fact:
    hyper_tuning_job_id: "{{ hyper_tuning_job_api.stderr_lines |select('search', 'describe') |regex_search('(\\d+)') }}"

- name: Wait for 5 sec
  ansible.builtin.pause:
    seconds: 5

- name: Canceling the running hypptune job
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/hyperparameterTuningJobs/{{ hyper_tuning_job_id }}:cancel"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: hypptune_job_cancel_cmd_restapi

- name: Waiting until the training job gets canceled
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/hyperparameterTuningJobs/{{ hyper_tuning_job_id }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: hypptune_job_cancel_cmd_restapi1
  until: hypptune_job_cancel_cmd_restapi1.json.state == "JOB_STATE_CANCELLED"
  retries: 12
  delay: 5

- name: Set status flag
  ansible.builtin.set_fact: hypptune_job_cancel_cmd_restapi_status="Passed"
  when: hypptune_job_cancel_cmd_restapi1.json.state == "JOB_STATE_CANCELLED"

- name: Log perform_hyper_tuning_job results
  ansible.builtin.script: >
    log.py "Vertex AI" "cancel hyperparameter_tuning_job" {{ hypptune_job_cancel_cmd_restapi_status }}
    "User can cancel hyperparameter_tuning_job via rest API" "https://rb.gy/miwpzw"
  args:
    executable: python3

- name: Delete the previously canceled Hypptune job
  ansible.builtin.uri:
    url: "https://{{ vertex_region }}-aiplatform.googleapis.com/v1/projects/{{ project }}/\
         locations/{{ vertex_region }}/hyperparameterTuningJobs/{{ hyper_tuning_job_id }}"
    method: DELETE
    headers:
      Content-Type: "application/json"
      Authorization: Bearer "{{ gcloud_auth }}"
  register: hypptune_job_delete_cmd_restapi

- name: hypptune_job_delete_cmd_restapi response
  ansible.builtin.debug:
    msg: "{{ hypptune_job_delete_cmd_restapi }}"

- name: Set status flag
  ansible.builtin.set_fact: hypptune_job_delete_cmd_restapi_status="Passed"
  when: hypptune_job_delete_cmd_restapi.status == 200

- name: Log perform_hyper_tuning_job results
  ansible.builtin.script: >
    log.py "Vertex AI" "delete hyperparameter_tuning_job" {{ hypptune_job_delete_cmd_restapi_status }}
    "User can delete hyperparameter_tuning_job via rest API" "https://rb.gy/miwpzw"
  args:
    executable: python3

- name: Cleanup duplicate files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ role_path }}/files/hyperparameter_tuning_umds_custcont.json"
    - "{{ role_path }}/files/hyperparameter_tuning_config.yml"
